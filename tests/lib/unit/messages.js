// Generated by CoffeeScript 1.6.3
(function() {
  var assert;

  assert = require('assert');

  suite('Messages', function() {
    test('Messages#type', function(done, server, client) {
      client["eval"](function() {
        return Accounts.createUser({
          username: 'matt',
          password: 'password',
          profile: {
            connecting: true
          }
        }, function() {
          var mention, normal, self;
          self = Messages.insert({
            owner: Meteor.userId(),
            from: 'matt',
            text: 'Hello!'
          });
          mention = Messages.insert({
            owner: Meteor.userId(),
            from: 'bill',
            text: 'Hello matt!'
          });
          normal = Messages.insert({
            owner: Meteor.userId(),
            from: 'bill',
            text: 'Hello!'
          });
          return emit('check', Messages.findOne(self).type(), Messages.findOne(mention).type(), Messages.findOne(normal).type());
        });
      });
      return client.once('check', function(self, mention, normal) {
        assert.equal(self, 'self');
        assert.equal(mention, 'mention');
        assert.equal(normal, 'normal');
        return done();
      });
    });
    test('Messages#convo', function(done, server, client) {
      client["eval"](function() {
        return Accounts.createUser({
          username: 'matt',
          password: 'password',
          profile: {
            connecting: true
          }
        }, function() {
          var convo, noConvo;
          Channels.insert({
            owner: Meteor.userId(),
            name: '#channel',
            nicks: {
              'matt': '',
              'bill': ''
            }
          });
          noConvo = Messages.insert({
            owner: Meteor.userId(),
            from: 'bill',
            channel: '#channel',
            text: 'Hello!'
          });
          convo = Messages.insert({
            owner: Meteor.userId(),
            from: 'bill',
            channel: '#channel',
            text: 'Hello matt!'
          });
          return emit('check', Messages.findOne(noConvo).convo(), Messages.findOne(convo).convo());
        });
      });
      return client.once('check', function(noConvo, convo) {
        assert.equal(noConvo, '');
        assert.equal(convo, 'matt');
        return done();
      });
    });
    return test('Messages#online', function(done, server) {
      server["eval"](function() {
        var offline, online;
        Channels.insert({
          name: '#channel',
          nicks: {
            'doug': '',
            'matt': ''
          }
        });
        online = Messages.insert({
          from: 'matt',
          channel: '#channel',
          text: 'Hello!'
        });
        offline = Messages.insert({
          from: 'bill',
          channel: '#channel',
          text: 'Hello!'
        });
        return emit('check', Messages.findOne(online).online(), Messages.findOne(offline).online());
      });
      return server.once('check', function(online, offline) {
        assert.equal(online, true);
        assert.equal(offline, false);
        return done();
      });
    });
  });

}).call(this);
